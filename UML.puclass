@startuml
class Autocine{
    - {static} serialVersionUID : long {readOnly}
    - String nombre
    - {static} ArrayList : clientes[] Cliente
    - {static} ArrayList : funcions[] Funcion
    - {static} ArrayList : peliculas[] Pelicula
    - {static} ArrayList : salas[] Sala
    - {static} Arraylist : autocine[] Autocine
    + Autocine (nombre : String)
    + {static} salasDisponibles (mes : int, dia : dia)
    + {static} verFuncion (pelicula : Pelicula, dia : int, hora : int)
    + verFuncion (cliente : Cliente)
    + {static} verFuncion (dia : int, mes : int)
    + verFuncion(mes : int) : Arraylist<Funcion>
    + verFuncion(ticket : Ticket) : Arraylist<Funcion>
    + agregarCliente(nuevo : Cliente) : void
    + {static} agregarPelicula (nuevo : Pelicula) : void
    + {static} agregarSala (nuevo : Sala) : void
    + {static} agregarFuncion(nuevo : Funcion) : void
    + {static} verificarCliente (num : int) : Boolean
    + {static} BuscadorCliente (num : int) : Cliente
    + {static} BuscadorFuncion (numero : int] : Funcion
    + {static} BuscadorTicket (num puesto : int, funcion : Funcion) : Ticket
    + BuscadorPelicula (nombre : String) : Pelicula
    + buscarSala (num : int) : Sala
}


class Cliente{
              - {static} serialVersionUID : long {readOnly}
              - autocine : Autocine
              - {static} historialCompras : List<Ticket>
              - {static} edad : int
              - nombre : String
              - id: int
              - clientes : List<Cliente>
              + GeneroMasVisto() : String
              + tostring() : String
}

class Funcion{
    - {static} serialVersionUID : long {readonly}
    - {static} numero : int
    - {static} cantidadFunciones : int
    - cantidadTicketsVendidos : int
    - tickets : Arraylist<Ticket>
    - autocine : Autocine
    - {static} sala : Sala
    - {static} pelicula : Pelicula
    - {static} horario : Horario
    - {static} mes : int
    - {static} d√≠a : int
    - {static} funciones : List<Funcion>
    + crearfuncion (dia : int, mes : int, horario : Horario,
    pelicula : Pelicula, mum sala : int, autocine : Autocine) : Funcion
    + crearTicket() : void
    + verDisponiblidad() : String
    + centerString (width : int, s : String) : String
    + ventaTicket (ticket : Ticket, cliente : Cliente) : Boolean
}

class Puesto{
             - serialVersionUID : long {readonly}
             - precio : float
             - numero : int
             - tipo : Tipo
             - puestos : List<Puesto>
             + Puesto (tipo : String, numero : int)
             }

Abstract Sala{
- {static} serialVersionUID : long {readOnly}
# funciones : ArrayList<Funcion>
# puestos : ArrayList<Puesto>
# autocine : Autocine
# precio : float
# filasPreferencial : int
# columnas : int
# filas : int
# numero : int
~ {static} salas : List <Sala>
+ cantidadPuestos() : int
+ crearPuestos() : void
+ agregarFuncion (funcion : Funcion) : void
+ verificarDisponibilidad (dia : int, mes : int) : boolean
+ verificarDisponibilidad (dia : int, mes : int, hora : String) : boolean
+ unoDisponible (dia : int, mes : int) : boolean
+ verHorarios (dia : int, mes : int) : String
              }
class Sala2D{
- {static} serialVersionUID : long {readOnly}
~ {static} salas2D : List<Sala2D>
+ cantidadPuestos() : int
+ crearPuestos() : void
             }

class Sala3D{
             - {static} serialVersionUID : long {readOnly}
             ~ {static} salas3D : List<Sala3D>
             - cantidadGafas : int
             + cantidadPuestos() : int
             + crearPuestos() : void
             }
Autocine <|--- cliente
@enduml